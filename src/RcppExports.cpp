// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// HyperTraPS
List HyperTraPS(NumericMatrix obs, Nullable<NumericMatrix> initialstates, Nullable<NumericMatrix> priors, Nullable<NumericVector> starttimes, Nullable<NumericVector> endtimes, NumericVector length, NumericVector kernel, NumericVector samplegap, NumericVector losses, NumericVector apm_type, NumericVector sa, NumericVector sgd, NumericVector sgd_scale, NumericVector seed, NumericVector outputinput, NumericVector regularise, NumericVector penalty, NumericVector lasso, NumericVector model, NumericVector pli, NumericVector walkers, NumericVector full_analysis, NumericVector limited_output, NumericVector output_transitions, NumericVector samples_per_row, Nullable<CharacterVector> featurenames);
RcppExport SEXP _hypertrapsct_HyperTraPS(SEXP obsSEXP, SEXP initialstatesSEXP, SEXP priorsSEXP, SEXP starttimesSEXP, SEXP endtimesSEXP, SEXP lengthSEXP, SEXP kernelSEXP, SEXP samplegapSEXP, SEXP lossesSEXP, SEXP apm_typeSEXP, SEXP saSEXP, SEXP sgdSEXP, SEXP sgd_scaleSEXP, SEXP seedSEXP, SEXP outputinputSEXP, SEXP regulariseSEXP, SEXP penaltySEXP, SEXP lassoSEXP, SEXP modelSEXP, SEXP pliSEXP, SEXP walkersSEXP, SEXP full_analysisSEXP, SEXP limited_outputSEXP, SEXP output_transitionsSEXP, SEXP samples_per_rowSEXP, SEXP featurenamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type initialstates(initialstatesSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type priors(priorsSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type starttimes(starttimesSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type endtimes(endtimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type samplegap(samplegapSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type losses(lossesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type apm_type(apm_typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sa(saSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sgd(sgdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sgd_scale(sgd_scaleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type outputinput(outputinputSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type regularise(regulariseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lasso(lassoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pli(pliSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type walkers(walkersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type full_analysis(full_analysisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type limited_output(limited_outputSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type output_transitions(output_transitionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type samples_per_row(samples_per_rowSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type featurenames(featurenamesSEXP);
    rcpp_result_gen = Rcpp::wrap(HyperTraPS(obs, initialstates, priors, starttimes, endtimes, length, kernel, samplegap, losses, apm_type, sa, sgd, sgd_scale, seed, outputinput, regularise, penalty, lasso, model, pli, walkers, full_analysis, limited_output, output_transitions, samples_per_row, featurenames));
    return rcpp_result_gen;
END_RCPP
}
// PosteriorAnalysis
List PosteriorAnalysis(List L, Nullable<CharacterVector> featurenames, int use_regularised, int limited_output, int samples_per_row);
RcppExport SEXP _hypertrapsct_PosteriorAnalysis(SEXP LSEXP, SEXP featurenamesSEXP, SEXP use_regularisedSEXP, SEXP limited_outputSEXP, SEXP samples_per_rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type featurenames(featurenamesSEXP);
    Rcpp::traits::input_parameter< int >::type use_regularised(use_regularisedSEXP);
    Rcpp::traits::input_parameter< int >::type limited_output(limited_outputSEXP);
    Rcpp::traits::input_parameter< int >::type samples_per_row(samples_per_rowSEXP);
    rcpp_result_gen = Rcpp::wrap(PosteriorAnalysis(L, featurenames, use_regularised, limited_output, samples_per_row));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hypertrapsct_HyperTraPS", (DL_FUNC) &_hypertrapsct_HyperTraPS, 26},
    {"_hypertrapsct_PosteriorAnalysis", (DL_FUNC) &_hypertrapsct_PosteriorAnalysis, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_hypertrapsct(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
